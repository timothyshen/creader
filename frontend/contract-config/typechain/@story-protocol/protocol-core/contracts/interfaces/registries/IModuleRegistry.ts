/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IModuleRegistryInterface extends utils.Interface {
  functions: {
    "getModule(string)": FunctionFragment;
    "getModuleType(address)": FunctionFragment;
    "getModuleTypeInterfaceId(string)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "registerModule(string,address)": FunctionFragment;
    "registerModule(string,address,string)": FunctionFragment;
    "registerModuleType(string,bytes4)": FunctionFragment;
    "removeModule(string)": FunctionFragment;
    "removeModuleType(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getModule"
      | "getModule(string)"
      | "getModuleType"
      | "getModuleType(address)"
      | "getModuleTypeInterfaceId"
      | "getModuleTypeInterfaceId(string)"
      | "isRegistered"
      | "isRegistered(address)"
      | "registerModule(string,address)"
      | "registerModule(string,address,string)"
      | "registerModuleType"
      | "registerModuleType(string,bytes4)"
      | "removeModule"
      | "removeModule(string)"
      | "removeModuleType"
      | "removeModuleType(string)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getModule(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleType",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleType(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleTypeInterfaceId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleTypeInterfaceId(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerModule(string,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerModule(string,address,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerModuleType",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerModuleType(string,bytes4)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModuleType",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModuleType(string)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "getModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModule(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModuleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModuleType(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModuleTypeInterfaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModuleTypeInterfaceId(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerModule(string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerModule(string,address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerModuleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerModuleType(string,bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModuleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModuleType(string)",
    data: BytesLike
  ): Result;

  events: {
    "ModuleAdded(string,address,bytes4,string)": EventFragment;
    "ModuleRemoved(string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModuleAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ModuleAdded(string,address,bytes4,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ModuleRemoved(string,address)"
  ): EventFragment;
}

export interface ModuleAddedEventObject {
  name: string;
  module: string;
  moduleTypeInterfaceId: string;
  moduleType: string;
}
export type ModuleAddedEvent = TypedEvent<
  [string, string, string, string],
  ModuleAddedEventObject
>;

export type ModuleAddedEventFilter = TypedEventFilter<ModuleAddedEvent>;

export interface ModuleRemovedEventObject {
  name: string;
  module: string;
}
export type ModuleRemovedEvent = TypedEvent<
  [string, string],
  ModuleRemovedEventObject
>;

export type ModuleRemovedEventFilter = TypedEventFilter<ModuleRemovedEvent>;

export interface IModuleRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IModuleRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getModule(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getModule(string)"(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getModuleType(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getModuleType(address)"(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getModuleTypeInterfaceId(
      moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getModuleTypeInterfaceId(string)"(
      moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isRegistered(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRegistered(address)"(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "registerModule(string,address)"(
      name: PromiseOrValue<string>,
      moduleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerModule(string,address,string)"(
      name: PromiseOrValue<string>,
      moduleAddress: PromiseOrValue<string>,
      moduleType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerModuleType(
      name: PromiseOrValue<string>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerModuleType(string,bytes4)"(
      name: PromiseOrValue<string>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeModule(string)"(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeModuleType(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeModuleType(string)"(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getModule(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getModule(string)"(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getModuleType(
    moduleAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getModuleType(address)"(
    moduleAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getModuleTypeInterfaceId(
    moduleType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getModuleTypeInterfaceId(string)"(
    moduleType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  isRegistered(
    moduleAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRegistered(address)"(
    moduleAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "registerModule(string,address)"(
    name: PromiseOrValue<string>,
    moduleAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerModule(string,address,string)"(
    name: PromiseOrValue<string>,
    moduleAddress: PromiseOrValue<string>,
    moduleType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerModuleType(
    name: PromiseOrValue<string>,
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerModuleType(string,bytes4)"(
    name: PromiseOrValue<string>,
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeModule(string)"(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeModuleType(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeModuleType(string)"(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getModule(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getModule(string)"(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getModuleType(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getModuleType(address)"(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getModuleTypeInterfaceId(
      moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getModuleTypeInterfaceId(string)"(
      moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isRegistered(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRegistered(address)"(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerModule(string,address)"(
      name: PromiseOrValue<string>,
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerModule(string,address,string)"(
      name: PromiseOrValue<string>,
      moduleAddress: PromiseOrValue<string>,
      moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerModuleType(
      name: PromiseOrValue<string>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerModuleType(string,bytes4)"(
      name: PromiseOrValue<string>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModule(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeModule(string)"(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModuleType(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeModuleType(string)"(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ModuleAdded(string,address,bytes4,string)"(
      name?: null,
      module?: PromiseOrValue<string> | null,
      moduleTypeInterfaceId?: PromiseOrValue<BytesLike> | null,
      moduleType?: null
    ): ModuleAddedEventFilter;
    ModuleAdded(
      name?: null,
      module?: PromiseOrValue<string> | null,
      moduleTypeInterfaceId?: PromiseOrValue<BytesLike> | null,
      moduleType?: null
    ): ModuleAddedEventFilter;

    "ModuleRemoved(string,address)"(
      name?: null,
      module?: PromiseOrValue<string> | null
    ): ModuleRemovedEventFilter;
    ModuleRemoved(
      name?: null,
      module?: PromiseOrValue<string> | null
    ): ModuleRemovedEventFilter;
  };

  estimateGas: {
    getModule(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getModule(string)"(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModuleType(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getModuleType(address)"(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModuleTypeInterfaceId(
      moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getModuleTypeInterfaceId(string)"(
      moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistered(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRegistered(address)"(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registerModule(string,address)"(
      name: PromiseOrValue<string>,
      moduleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerModule(string,address,string)"(
      name: PromiseOrValue<string>,
      moduleAddress: PromiseOrValue<string>,
      moduleType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerModuleType(
      name: PromiseOrValue<string>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerModuleType(string,bytes4)"(
      name: PromiseOrValue<string>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeModule(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeModule(string)"(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeModuleType(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeModuleType(string)"(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getModule(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getModule(string)"(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getModuleType(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getModuleType(address)"(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getModuleTypeInterfaceId(
      moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getModuleTypeInterfaceId(string)"(
      moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistered(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRegistered(address)"(
      moduleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registerModule(string,address)"(
      name: PromiseOrValue<string>,
      moduleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerModule(string,address,string)"(
      name: PromiseOrValue<string>,
      moduleAddress: PromiseOrValue<string>,
      moduleType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerModuleType(
      name: PromiseOrValue<string>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerModuleType(string,bytes4)"(
      name: PromiseOrValue<string>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeModule(string)"(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeModuleType(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeModuleType(string)"(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
