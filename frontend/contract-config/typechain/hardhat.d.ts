/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessManagedUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessManagedUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "IAccessManaged",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessManaged__factory>;
    getContractFactory(
      name: "IAccessManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessManager__factory>;
    getContractFactory(
      name: "IAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthority__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC4906",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4906__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "AccessControlled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlled__factory>;
    getContractFactory(
      name: "AccessController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessController__factory>;
    getContractFactory(
      name: "IAccessController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessController__factory>;
    getContractFactory(
      name: "IIPAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIPAccount__factory>;
    getContractFactory(
      name: "IIPAccountStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIPAccountStorage__factory>;
    getContractFactory(
      name: "ILicenseToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILicenseToken__factory>;
    getContractFactory(
      name: "IHookModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHookModule__factory>;
    getContractFactory(
      name: "IModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModule__factory>;
    getContractFactory(
      name: "IDisputeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDisputeModule__factory>;
    getContractFactory(
      name: "ILicenseTemplate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILicenseTemplate__factory>;
    getContractFactory(
      name: "ILicensingModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILicensingModule__factory>;
    getContractFactory(
      name: "IMintingFeeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMintingFeeModule__factory>;
    getContractFactory(
      name: "IPILicenseTemplate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPILicenseTemplate__factory>;
    getContractFactory(
      name: "IRoyaltyModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoyaltyModule__factory>;
    getContractFactory(
      name: "IRoyaltyPolicy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoyaltyPolicy__factory>;
    getContractFactory(
      name: "IIPAccountRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIPAccountRegistry__factory>;
    getContractFactory(
      name: "IIPAssetRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIPAssetRegistry__factory>;
    getContractFactory(
      name: "ILicenseRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILicenseRegistry__factory>;
    getContractFactory(
      name: "IModuleRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModuleRegistry__factory>;
    getContractFactory(
      name: "AccessPermission",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessPermission__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "PILicenseTemplateErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PILicenseTemplateErrors__factory>;
    getContractFactory(
      name: "BaseModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseModule__factory>;
    getContractFactory(
      name: "BaseLicenseTemplateUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseLicenseTemplateUpgradeable__factory>;
    getContractFactory(
      name: "LicensingModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LicensingModule__factory>;
    getContractFactory(
      name: "LicensorApprovalChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LicensorApprovalChecker__factory>;
    getContractFactory(
      name: "PILicenseTemplate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PILicenseTemplate__factory>;
    getContractFactory(
      name: "RoyaltyModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoyaltyModule__factory>;
    getContractFactory(
      name: "ProtocolPausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolPausableUpgradeable__factory>;
    getContractFactory(
      name: "IPAccountRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPAccountRegistry__factory>;
    getContractFactory(
      name: "IPAssetRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPAssetRegistry__factory>;
    getContractFactory(
      name: "CopyrightNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CopyrightNFT__factory>;
    getContractFactory(
      name: "ICopyrightNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICopyrightNFT__factory>;
    getContractFactory(
      name: "IPALicenseToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPALicenseToken__factory>;
    getContractFactory(
      name: "IMulticall3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMulticall3__factory>;
    getContractFactory(
      name: "CreaderToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CreaderToken__factory>;
    getContractFactory(
      name: "ICreaderToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICreaderToken__factory>;
    getContractFactory(
      name: "Bodhi",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bodhi__factory>;
    getContractFactory(
      name: "IBodhi",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBodhi__factory>;
    getContractFactory(
      name: "IERC6551Account",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC6551Account__factory>;
    getContractFactory(
      name: "IERC6551Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC6551Registry__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155TokenReceiver__factory>;

    getContractAt(
      name: "AccessManagedUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessManagedUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "IAccessManaged",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessManaged>;
    getContractAt(
      name: "IAccessManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessManager>;
    getContractAt(
      name: "IAuthority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthority>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC4906",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4906>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Utils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "Address",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Math",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "SafeCast",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "ShortStrings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Strings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "AccessControlled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlled>;
    getContractAt(
      name: "AccessController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessController>;
    getContractAt(
      name: "IAccessController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessController>;
    getContractAt(
      name: "IIPAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIPAccount>;
    getContractAt(
      name: "IIPAccountStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIPAccountStorage>;
    getContractAt(
      name: "ILicenseToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILicenseToken>;
    getContractAt(
      name: "IHookModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHookModule>;
    getContractAt(
      name: "IModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModule>;
    getContractAt(
      name: "IDisputeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDisputeModule>;
    getContractAt(
      name: "ILicenseTemplate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILicenseTemplate>;
    getContractAt(
      name: "ILicensingModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILicensingModule>;
    getContractAt(
      name: "IMintingFeeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMintingFeeModule>;
    getContractAt(
      name: "IPILicenseTemplate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPILicenseTemplate>;
    getContractAt(
      name: "IRoyaltyModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoyaltyModule>;
    getContractAt(
      name: "IRoyaltyPolicy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoyaltyPolicy>;
    getContractAt(
      name: "IIPAccountRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIPAccountRegistry>;
    getContractAt(
      name: "IIPAssetRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIPAssetRegistry>;
    getContractAt(
      name: "ILicenseRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILicenseRegistry>;
    getContractAt(
      name: "IModuleRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModuleRegistry>;
    getContractAt(
      name: "AccessPermission",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessPermission>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "PILicenseTemplateErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PILicenseTemplateErrors>;
    getContractAt(
      name: "BaseModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseModule>;
    getContractAt(
      name: "BaseLicenseTemplateUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseLicenseTemplateUpgradeable>;
    getContractAt(
      name: "LicensingModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LicensingModule>;
    getContractAt(
      name: "LicensorApprovalChecker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LicensorApprovalChecker>;
    getContractAt(
      name: "PILicenseTemplate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PILicenseTemplate>;
    getContractAt(
      name: "RoyaltyModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoyaltyModule>;
    getContractAt(
      name: "ProtocolPausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolPausableUpgradeable>;
    getContractAt(
      name: "IPAccountRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPAccountRegistry>;
    getContractAt(
      name: "IPAssetRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPAssetRegistry>;
    getContractAt(
      name: "CopyrightNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CopyrightNFT>;
    getContractAt(
      name: "ICopyrightNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICopyrightNFT>;
    getContractAt(
      name: "IPALicenseToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPALicenseToken>;
    getContractAt(
      name: "IMulticall3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMulticall3>;
    getContractAt(
      name: "CreaderToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CreaderToken>;
    getContractAt(
      name: "ICreaderToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICreaderToken>;
    getContractAt(
      name: "Bodhi",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bodhi>;
    getContractAt(
      name: "IBodhi",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBodhi>;
    getContractAt(
      name: "IERC6551Account",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC6551Account>;
    getContractAt(
      name: "IERC6551Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC6551Registry>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155TokenReceiver>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
