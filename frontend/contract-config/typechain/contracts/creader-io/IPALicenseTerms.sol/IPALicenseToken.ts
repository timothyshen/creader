/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IPALicenseTokenInterface extends utils.Interface {
  functions: {
    "BODHI()": FunctionFragment;
    "IP_ASSET_REGISTRY()": FunctionFragment;
    "LICENSING_MODULE()": FunctionFragment;
    "PIL_TEMPLATE()": FunctionFragment;
    "SNFT()": FunctionFragment;
    "mintLicenseTokenCopyright(address)": FunctionFragment;
    "remixTypes(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BODHI"
      | "BODHI()"
      | "IP_ASSET_REGISTRY"
      | "IP_ASSET_REGISTRY()"
      | "LICENSING_MODULE"
      | "LICENSING_MODULE()"
      | "PIL_TEMPLATE"
      | "PIL_TEMPLATE()"
      | "SNFT"
      | "SNFT()"
      | "mintLicenseTokenCopyright"
      | "mintLicenseTokenCopyright(address)"
      | "remixTypes"
      | "remixTypes(address,uint256)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BODHI", values?: undefined): string;
  encodeFunctionData(functionFragment: "BODHI()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "IP_ASSET_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ASSET_REGISTRY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LICENSING_MODULE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LICENSING_MODULE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PIL_TEMPLATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PIL_TEMPLATE()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "SNFT()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintLicenseTokenCopyright",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLicenseTokenCopyright(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "remixTypes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "remixTypes(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "BODHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BODHI()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "IP_ASSET_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ASSET_REGISTRY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LICENSING_MODULE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LICENSING_MODULE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PIL_TEMPLATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PIL_TEMPLATE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SNFT()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintLicenseTokenCopyright",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLicenseTokenCopyright(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remixTypes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remixTypes(address,uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPALicenseToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPALicenseTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BODHI(overrides?: CallOverrides): Promise<[string]>;

    "BODHI()"(overrides?: CallOverrides): Promise<[string]>;

    IP_ASSET_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    "IP_ASSET_REGISTRY()"(overrides?: CallOverrides): Promise<[string]>;

    LICENSING_MODULE(overrides?: CallOverrides): Promise<[string]>;

    "LICENSING_MODULE()"(overrides?: CallOverrides): Promise<[string]>;

    PIL_TEMPLATE(overrides?: CallOverrides): Promise<[string]>;

    "PIL_TEMPLATE()"(overrides?: CallOverrides): Promise<[string]>;

    SNFT(overrides?: CallOverrides): Promise<[string]>;

    "SNFT()"(overrides?: CallOverrides): Promise<[string]>;

    mintLicenseTokenCopyright(
      ipId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintLicenseTokenCopyright(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remixTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "remixTypes(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  BODHI(overrides?: CallOverrides): Promise<string>;

  "BODHI()"(overrides?: CallOverrides): Promise<string>;

  IP_ASSET_REGISTRY(overrides?: CallOverrides): Promise<string>;

  "IP_ASSET_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

  LICENSING_MODULE(overrides?: CallOverrides): Promise<string>;

  "LICENSING_MODULE()"(overrides?: CallOverrides): Promise<string>;

  PIL_TEMPLATE(overrides?: CallOverrides): Promise<string>;

  "PIL_TEMPLATE()"(overrides?: CallOverrides): Promise<string>;

  SNFT(overrides?: CallOverrides): Promise<string>;

  "SNFT()"(overrides?: CallOverrides): Promise<string>;

  mintLicenseTokenCopyright(
    ipId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintLicenseTokenCopyright(address)"(
    ipId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remixTypes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  "remixTypes(address,uint256)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    BODHI(overrides?: CallOverrides): Promise<string>;

    "BODHI()"(overrides?: CallOverrides): Promise<string>;

    IP_ASSET_REGISTRY(overrides?: CallOverrides): Promise<string>;

    "IP_ASSET_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

    LICENSING_MODULE(overrides?: CallOverrides): Promise<string>;

    "LICENSING_MODULE()"(overrides?: CallOverrides): Promise<string>;

    PIL_TEMPLATE(overrides?: CallOverrides): Promise<string>;

    "PIL_TEMPLATE()"(overrides?: CallOverrides): Promise<string>;

    SNFT(overrides?: CallOverrides): Promise<string>;

    "SNFT()"(overrides?: CallOverrides): Promise<string>;

    mintLicenseTokenCopyright(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "mintLicenseTokenCopyright(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    remixTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    "remixTypes(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    BODHI(overrides?: CallOverrides): Promise<BigNumber>;

    "BODHI()"(overrides?: CallOverrides): Promise<BigNumber>;

    IP_ASSET_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    "IP_ASSET_REGISTRY()"(overrides?: CallOverrides): Promise<BigNumber>;

    LICENSING_MODULE(overrides?: CallOverrides): Promise<BigNumber>;

    "LICENSING_MODULE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PIL_TEMPLATE(overrides?: CallOverrides): Promise<BigNumber>;

    "PIL_TEMPLATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "SNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintLicenseTokenCopyright(
      ipId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintLicenseTokenCopyright(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remixTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remixTypes(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BODHI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BODHI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IP_ASSET_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "IP_ASSET_REGISTRY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LICENSING_MODULE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LICENSING_MODULE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PIL_TEMPLATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PIL_TEMPLATE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SNFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintLicenseTokenCopyright(
      ipId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintLicenseTokenCopyright(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remixTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "remixTypes(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
