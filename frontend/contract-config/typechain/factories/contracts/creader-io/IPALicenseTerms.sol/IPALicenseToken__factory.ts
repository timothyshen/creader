/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  IPALicenseToken,
  IPALicenseTokenInterface,
} from "../../../../contracts/creader-io/IPALicenseTerms.sol/IPALicenseToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "ipAssetRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "licensingModule",
        type: "address",
      },
      {
        internalType: "address",
        name: "pilTemplate",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "BODHI",
    outputs: [
      {
        internalType: "contract IBodhi",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IP_ASSET_REGISTRY",
    outputs: [
      {
        internalType: "contract IPAssetRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "LICENSING_MODULE",
    outputs: [
      {
        internalType: "contract LicensingModule",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PIL_TEMPLATE",
    outputs: [
      {
        internalType: "contract PILicenseTemplate",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SNFT",
    outputs: [
      {
        internalType: "contract SimpleNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "licenseTermsId",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "ltRecipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "ltAmount",
        type: "uint256",
      },
    ],
    name: "mintLicenseTokenCopyright",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "remixTypes",
    outputs: [
      {
        internalType: "enum IPALicenseToken.RemixType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61012060405234801561001157600080fd5b50604051610b18380380610b188339818101604052810190610033919061013a565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505061018d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610107826100dc565b9050919050565b610117816100fc565b811461012257600080fd5b50565b6000815190506101348161010e565b92915050565b600080600060608486031215610153576101526100d7565b5b600061016186828701610125565b935050602061017286828701610125565b925050604061018386828701610125565b9150509250925092565b60805160a05160c05160e0516101005161092b6101ed60003960006103c6015260006103730152600081816101bb0152818161026d015261030701526000818161017e01528181610230015261034f0152600061032b015261092b6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806365165aa51161005b57806365165aa5146100ef5780636680e4bd1461010d578063975d81dc1461012b578063f54288cd1461015b5761007d565b806305345b2d1461008257806312c4ce88146100b357806341c782c5146100d1575b600080fd5b61009c600480360381019061009791906104ba565b610179565b6040516100aa92919061053f565b60405180910390f35b6100bb610305565b6040516100c891906105c7565b60405180910390f35b6100d9610329565b6040516100e69190610603565b60405180910390f35b6100f761034d565b604051610104919061063f565b60405180910390f35b610115610371565b604051610122919061067b565b60405180910390f35b61014560048036038101906101409190610696565b610395565b604051610152919061074d565b60405180910390f35b6101636103c4565b6040516101709190610789565b60405180910390f35b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a4130c0877f000000000000000000000000000000000000000000000000000000000000000060026040518463ffffffff1660e01b81526004016101fa939291906107df565b600060405180830381600087803b15801561021457600080fd5b505af1158015610228573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630672a3bf887f00000000000000000000000000000000000000000000000000000000000000006002888a6040518663ffffffff1660e01b81526004016102b095949392919061084d565b6020604051808303816000875af11580156102cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f391906108c8565b90508681925092505094509492505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610418826103ed565b9050919050565b6104288161040d565b811461043357600080fd5b50565b6000813590506104458161041f565b92915050565b600060ff82169050919050565b6104618161044b565b811461046c57600080fd5b50565b60008135905061047e81610458565b92915050565b6000819050919050565b61049781610484565b81146104a257600080fd5b50565b6000813590506104b48161048e565b92915050565b600080600080608085870312156104d4576104d36103e8565b5b60006104e287828801610436565b94505060206104f38782880161046f565b935050604061050487828801610436565b9250506060610515878288016104a5565b91505092959194509250565b61052a8161040d565b82525050565b61053981610484565b82525050565b60006040820190506105546000830185610521565b6105616020830184610530565b9392505050565b6000819050919050565b600061058d610588610583846103ed565b610568565b6103ed565b9050919050565b600061059f82610572565b9050919050565b60006105b182610594565b9050919050565b6105c1816105a6565b82525050565b60006020820190506105dc60008301846105b8565b92915050565b60006105ed82610594565b9050919050565b6105fd816105e2565b82525050565b600060208201905061061860008301846105f4565b92915050565b600061062982610594565b9050919050565b6106398161061e565b82525050565b60006020820190506106546000830184610630565b92915050565b600061066582610594565b9050919050565b6106758161065a565b82525050565b6000602082019050610690600083018461066c565b92915050565b600080604083850312156106ad576106ac6103e8565b5b60006106bb85828601610436565b92505060206106cc858286016104a5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610716576107156106d6565b5b50565b600081905061072782610705565b919050565b600061073782610719565b9050919050565b6107478161072c565b82525050565b6000602082019050610762600083018461073e565b92915050565b600061077382610594565b9050919050565b61078381610768565b82525050565b600060208201905061079e600083018461077a565b92915050565b6000819050919050565b60006107c96107c46107bf846107a4565b610568565b610484565b9050919050565b6107d9816107ae565b82525050565b60006060820190506107f46000830186610521565b6108016020830185610521565b61080e60408301846107d0565b949350505050565b600082825260208201905092915050565b50565b6000610837600083610816565b915061084282610827565b600082019050919050565b600060c0820190506108626000830188610521565b61086f6020830187610521565b61087c60408301866107d0565b6108896060830185610530565b6108966080830184610521565b81810360a08301526108a78161082a565b90509695505050505050565b6000815190506108c28161048e565b92915050565b6000602082840312156108de576108dd6103e8565b5b60006108ec848285016108b3565b9150509291505056fea26469706673582212203eff5477c301bb598ab16e3118666abf08c867abcbe94d872bfc4aa6555b5fcb64736f6c63430008170033";

type IPALicenseTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IPALicenseTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IPALicenseToken__factory extends ContractFactory {
  constructor(...args: IPALicenseTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    ipAssetRegistry: PromiseOrValue<string>,
    licensingModule: PromiseOrValue<string>,
    pilTemplate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IPALicenseToken> {
    return super.deploy(
      ipAssetRegistry,
      licensingModule,
      pilTemplate,
      overrides || {}
    ) as Promise<IPALicenseToken>;
  }
  override getDeployTransaction(
    ipAssetRegistry: PromiseOrValue<string>,
    licensingModule: PromiseOrValue<string>,
    pilTemplate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      ipAssetRegistry,
      licensingModule,
      pilTemplate,
      overrides || {}
    );
  }
  override attach(address: string): IPALicenseToken {
    return super.attach(address) as IPALicenseToken;
  }
  override connect(signer: Signer): IPALicenseToken__factory {
    return super.connect(signer) as IPALicenseToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IPALicenseTokenInterface {
    return new utils.Interface(_abi) as IPALicenseTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPALicenseToken {
    return new Contract(address, _abi, signerOrProvider) as IPALicenseToken;
  }
}
