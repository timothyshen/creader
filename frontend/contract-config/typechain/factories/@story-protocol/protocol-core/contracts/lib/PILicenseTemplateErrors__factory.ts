/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  PILicenseTemplateErrors,
  PILicenseTemplateErrorsInterface,
} from "../../../../../@story-protocol/protocol-core/contracts/lib/PILicenseTemplateErrors";

const _abi = [
  {
    inputs: [],
    name: "PILicenseTemplate__CommercialDisabled_CantAddAttribution",
    type: "error",
  },
  {
    inputs: [],
    name: "PILicenseTemplate__CommercialDisabled_CantAddCommercializers",
    type: "error",
  },
  {
    inputs: [],
    name: "PILicenseTemplate__CommercialDisabled_CantAddRevShare",
    type: "error",
  },
  {
    inputs: [],
    name: "PILicenseTemplate__CommercialDisabled_CantAddRoyaltyPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "PILicenseTemplate__CommercialEnabled_RoyaltyPolicyRequired",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "checker",
        type: "address",
      },
    ],
    name: "PILicenseTemplate__CommercializerCheckerDoesNotSupportHook",
    type: "error",
  },
  {
    inputs: [],
    name: "PILicenseTemplate__CurrencyTokenNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "PILicenseTemplate__DerivativesDisabled_CantAddApproval",
    type: "error",
  },
  {
    inputs: [],
    name: "PILicenseTemplate__DerivativesDisabled_CantAddAttribution",
    type: "error",
  },
  {
    inputs: [],
    name: "PILicenseTemplate__DerivativesDisabled_CantAddReciprocal",
    type: "error",
  },
  {
    inputs: [],
    name: "PILicenseTemplate__RoyaltyPolicyNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "PILicenseTemplate__RoyaltyPolicyRequiresCurrencyToken",
    type: "error",
  },
  {
    inputs: [],
    name: "PILicenseTemplate__ZeroAccessManager",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b645f0d02a49d8c7a9e5771d1a4b702deb1146cd2a64b64587834cb6e8e2244764736f6c63430008170033";

type PILicenseTemplateErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PILicenseTemplateErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PILicenseTemplateErrors__factory extends ContractFactory {
  constructor(...args: PILicenseTemplateErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PILicenseTemplateErrors> {
    return super.deploy(overrides || {}) as Promise<PILicenseTemplateErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PILicenseTemplateErrors {
    return super.attach(address) as PILicenseTemplateErrors;
  }
  override connect(signer: Signer): PILicenseTemplateErrors__factory {
    return super.connect(signer) as PILicenseTemplateErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PILicenseTemplateErrorsInterface {
    return new utils.Interface(_abi) as PILicenseTemplateErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PILicenseTemplateErrors {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PILicenseTemplateErrors;
  }
}
