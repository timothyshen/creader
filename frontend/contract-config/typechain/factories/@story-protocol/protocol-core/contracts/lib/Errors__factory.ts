/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  Errors,
  ErrorsInterface,
} from "../../../../../@story-protocol/protocol-core/contracts/lib/Errors";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "AccessControlled__CallerIsNotIpAccount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipAccount",
        type: "address",
      },
    ],
    name: "AccessControlled__NotIpAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "AccessControlled__ZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "AccessController__BothCallerAndRecipientAreNotRegisteredModule",
    type: "error",
  },
  {
    inputs: [],
    name: "AccessController__CallerIsNotIPAccountOrOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipAccount",
        type: "address",
      },
    ],
    name: "AccessController__IPAccountIsNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "AccessController__IPAccountIsZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipAccount",
        type: "address",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "func",
        type: "bytes4",
      },
    ],
    name: "AccessController__PermissionDenied",
    type: "error",
  },
  {
    inputs: [],
    name: "AccessController__PermissionIsNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "AccessController__SignerIsZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "AccessController__ZeroAccessManager",
    type: "error",
  },
  {
    inputs: [],
    name: "ArbitrationPolicySP__NotDisputeModule",
    type: "error",
  },
  {
    inputs: [],
    name: "ArbitrationPolicySP__ZeroAccessManager",
    type: "error",
  },
  {
    inputs: [],
    name: "ArbitrationPolicySP__ZeroDisputeModule",
    type: "error",
  },
  {
    inputs: [],
    name: "ArbitrationPolicySP__ZeroPaymentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "CoreMetadataModule__MetadataAlreadyFrozen",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotAbleToResolve",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotDerivative",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotDisputeInitiator",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotInDisputeState",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotRegisteredIpId",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotWhitelistedArbitrationPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotWhitelistedArbitrationRelayer",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotWhitelistedDisputeTag",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ParentDisputeNotResolved",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ParentIpIdMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ParentNotTagged",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroAccessController",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroAccessManager",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroArbitrationPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroArbitrationRelayer",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroDisputeTag",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroIPAssetRegistry",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroLicenseRegistry",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroLinkToDisputeEvidence",
    type: "error",
  },
  {
    inputs: [],
    name: "IPAccountRegistry_ZeroIpAccountImpl",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "module",
        type: "address",
      },
    ],
    name: "IPAccountStorage__NotRegisteredModule",
    type: "error",
  },
  {
    inputs: [],
    name: "IPAccount__ExpiredSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "IPAccount__InvalidCalldata",
    type: "error",
  },
  {
    inputs: [],
    name: "IPAccount__InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "IPAccount__InvalidSigner",
    type: "error",
  },
  {
    inputs: [],
    name: "IPAccount__ZeroAccessController",
    type: "error",
  },
  {
    inputs: [],
    name: "IPAssetRegistry__AlreadyRegistered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "IPAssetRegistry__InvalidToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "IPAssetRegistry__UnsupportedIERC721",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "IPAssetRegistry__UnsupportedIERC721Metadata",
    type: "error",
  },
  {
    inputs: [],
    name: "IPAssetRegistry__ZeroAccessManager",
    type: "error",
  },
  {
    inputs: [],
    name: "IpRoyaltyVault__AlreadyClaimed",
    type: "error",
  },
  {
    inputs: [],
    name: "IpRoyaltyVault__ClaimerNotAnAncestor",
    type: "error",
  },
  {
    inputs: [],
    name: "IpRoyaltyVault__EnforcedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "IpRoyaltyVault__IpTagged",
    type: "error",
  },
  {
    inputs: [],
    name: "IpRoyaltyVault__NotRoyaltyPolicyLAP",
    type: "error",
  },
  {
    inputs: [],
    name: "IpRoyaltyVault__SnapshotIntervalTooShort",
    type: "error",
  },
  {
    inputs: [],
    name: "IpRoyaltyVault__ZeroDisputeModule",
    type: "error",
  },
  {
    inputs: [],
    name: "IpRoyaltyVault__ZeroRoyaltyPolicyLAP",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__CallerNotLicensingModule",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
    ],
    name: "LicenseRegistry__DerivativeAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
    ],
    name: "LicenseRegistry__DerivativeIpAlreadyHasLicense",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "LicenseRegistry__DerivativeIsParent",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "LicenseRegistry__DuplicateLicense",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "LicenseRegistry__IndexOutOfBounds",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "LicenseRegistry__IpExpired",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "LicenseRegistry__LicenseTermsAlreadyAttached",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "LicenseRegistry__LicenseTermsNotExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "LicenseRegistry__LicensorIpHasNoLicenseTerms",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__NoParentIp",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
    ],
    name: "LicenseRegistry__NotLicenseTemplate",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__NotTransferable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "LicenseRegistry__ParentIpExpired",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "LicenseRegistry__ParentIpHasNoLicenseTerms",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "LicenseRegistry__ParentIpTagged",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
    ],
    name: "LicenseRegistry__ParentIpUnmatchedLicenseTemplate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "address",
        name: "newLicenseTemplate",
        type: "address",
      },
    ],
    name: "LicenseRegistry__UnmatchedLicenseTemplate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
    ],
    name: "LicenseRegistry__UnregisteredLicenseTemplate",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__ZeroAccessManager",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__ZeroDisputeModule",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__ZeroLicensingModule",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "address",
        name: "anotherLicenseTemplate",
        type: "address",
      },
    ],
    name: "LicenseToken__AllLicenseTokensMustFromSameLicenseTemplate",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseToken__CallerNotLicensingModule",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expiredAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentTimestamp",
        type: "uint256",
      },
    ],
    name: "LicenseToken__LicenseTokenExpired",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "iPowner",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOwner",
        type: "address",
      },
    ],
    name: "LicenseToken__NotLicenseTokenOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseToken__NotTransferable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "LicenseToken__RevokedLicense",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseToken__ZeroAccessManager",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseToken__ZeroDisputeModule",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseToken__ZeroLicensingModule",
    type: "error",
  },
  {
    inputs: [],
    name: "LicensingModule__DerivativesCannotAddLicenseTerms",
    type: "error",
  },
  {
    inputs: [],
    name: "LicensingModule__DisputedIpId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "royaltyPolicy",
        type: "address",
      },
      {
        internalType: "address",
        name: "anotherRoyaltyPolicy",
        type: "address",
      },
    ],
    name: "LicensingModule__IncompatibleRoyaltyPolicy",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "licensorIpId",
        type: "address",
      },
    ],
    name: "LicensingModule__LicenseDenyMintLicenseToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
    ],
    name: "LicensingModule__LicenseNotCompatibleForDerivative",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ipLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "licenseTermsLength",
        type: "uint256",
      },
    ],
    name: "LicensingModule__LicenseTermsLengthMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "LicensingModule__LicenseTermsNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "licenseTokenIds",
        type: "uint256[]",
      },
    ],
    name: "LicensingModule__LicenseTokenNotCompatibleForDerivative",
    type: "error",
  },
  {
    inputs: [],
    name: "LicensingModule__MintAmountZero",
    type: "error",
  },
  {
    inputs: [],
    name: "LicensingModule__NoLicenseToken",
    type: "error",
  },
  {
    inputs: [],
    name: "LicensingModule__NoParentIp",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "LicensingModule__ReceiverCheckFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "LicensingModule__ReceiverZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "LicensingModule__ZeroAccessManager",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__InterfaceIdZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleAddressNotContract",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleAddressZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleNotRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleNotSupportExpectedModuleTypeInterfaceId",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleTypeAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleTypeEmptyString",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleTypeNotRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__NameAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__NameDoesNotMatch",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__NameEmptyString",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ZeroAccessManager",
    type: "error",
  },
  {
    inputs: [],
    name: "ProtocolPauseAdmin__AddingPausedContract",
    type: "error",
  },
  {
    inputs: [],
    name: "ProtocolPauseAdmin__PausableAlreadyAdded",
    type: "error",
  },
  {
    inputs: [],
    name: "ProtocolPauseAdmin__PausableNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "ProtocolPauseAdmin__ZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__CanOnlyMintSelectedPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__IncompatibleRoyaltyPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__IpIsExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__IpIsTagged",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__NoParentsOnLinking",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__NoRoyaltyPolicySet",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__NotAllowedCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__NotWhitelistedRoyaltyPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__NotWhitelistedRoyaltyToken",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__ZeroAccessManager",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__ZeroDisputeModule",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__ZeroLicenseRegistry",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__ZeroLicensingModule",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__ZeroRoyaltyPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__ZeroRoyaltyToken",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLAP__AboveAncestorsLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLAP__AboveParentLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLAP__AboveRoyaltyStackLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLAP__InvalidParentRoyaltiesLength",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLAP__LastPositionNotAbleToMintLicense",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLAP__NotRoyaltyModule",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLAP__UnlinkableToParents",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLAP__ZeroAccessManager",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLAP__ZeroIpRoyaltyVaultBeacon",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLAP__ZeroLicensingModule",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLAP__ZeroRoyaltyModule",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204477fb9b5292cb608955ce16f0a170d579881efd5b29e2d0a9f7ef946a0b4ae164736f6c63430008170033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors;
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors;
  }
}
